//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/SE_WorkSpace/Input System/DroneControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @DroneControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DroneControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DroneControl"",
    ""maps"": [
        {
            ""name"": ""DroneMovement"",
            ""id"": ""82bccf81-1f73-48ec-9ee2-68a74ab737cb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""972e3966-9ce4-4f5d-aaf4-8a750f21cb02"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""c35c54f0-1ff1-4e2b-9e6d-4c22b193edd6"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""9f6c501a-c68e-4859-ad09-d929ada83326"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""5eb4fd33-26fe-407d-a5b0-211788eff6af"",
                    ""path"": ""<QuestProTouchController>{LeftHand}/thumbstick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7e67ef17-344e-4e90-b1e5-e54bfb5f2fc3"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/thumbstick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""72e02f5a-889b-480d-8ae6-e5c0fd9be91e"",
                    ""path"": ""<QuestProTouchController>{LeftHand}/thumbstick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""a58c3b4c-8cce-44eb-9402-7b031658ee78"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{RightHand}/thumbstick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""66ffd722-793f-4854-88da-141595e0576c"",
                    ""path"": ""<QuestProTouchController>{RightHand}/thumbstick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""f72f7df8-b689-40cc-82e7-b25565a12f21"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{RightHand}/thumbstick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""c6fa0d7e-4170-4f17-bb8d-423f525084b0"",
                    ""path"": ""<QuestProTouchController>{RightHand}/thumbstick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""0c754e52-aacd-4383-a9f2-9fad15599750"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""b9a81f1c-d740-4b92-8f72-151a230ba73b"",
                    ""path"": ""<QuestProTouchController>{RightHand}/thumbstick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""42493ec3-4609-4500-8a8d-5630ee8bf21f"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""1aad6e99-4af6-44d1-a086-ca420899835a"",
                    ""path"": ""<QuestProTouchController>{RightHand}/thumbstick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DroneRotate"",
            ""id"": ""8b6999fc-0426-4688-8617-3fd54dd517fd"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""6419f0d8-f4a2-487b-beaf-4b5e8b3c9b38"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f1714a68-201b-4fae-9ef6-5da2c004adad"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""deae89d0-f376-4e4c-98c0-ae3f89e22ac8"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9fea7255-e948-4179-b2d4-7ce3021ca598"",
                    ""path"": ""<QuestProTouchController>{LeftHand}/thumbstick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0822abfd-0c22-410c-bdbf-03355493853a"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d52ed168-65e0-4711-b467-f3443f3ce60d"",
                    ""path"": ""<QuestProTouchController>{LeftHand}/thumbstick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ToggleUIElement"",
            ""id"": ""28134320-7d7f-4e05-9bb2-5d63786aea03"",
            ""actions"": [
                {
                    ""name"": ""TurnOnCamera"",
                    ""type"": ""Button"",
                    ""id"": ""72aad346-671b-42e3-bb84-b8af24f0fe9c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5314f6c4-e2a9-49d1-8626-3ca84cdeb4db"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/primarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnOnCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""635309d8-a2c7-4726-99f0-39b83a42013b"",
                    ""path"": ""<QuestProTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnOnCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SprayWater"",
            ""id"": ""036418de-02f4-410a-88a7-32c2237dd3a2"",
            ""actions"": [
                {
                    ""name"": ""SprayWaterAction"",
                    ""type"": ""Button"",
                    ""id"": ""6a7df3ed-c7af-42dd-b2b5-6766eeec0242"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9ef6ba2-5a19-4fcb-8647-cee54f1c593f"",
                    ""path"": ""<OculusTouchController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprayWaterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpraySeed"",
            ""id"": ""ee1d99bf-91f4-47e6-bab6-f47a2c3e4bb5"",
            ""actions"": [
                {
                    ""name"": ""SpraySeedAction"",
                    ""type"": ""Button"",
                    ""id"": ""8fbf89fa-db7c-4296-af57-dd74485d3c20"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4963d528-addf-4ad0-8221-77aeb9b0e9c0"",
                    ""path"": ""<OculusTouchController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpraySeedAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FarmWater"",
            ""id"": ""50e286db-69a8-4fea-bc90-73993b7d3947"",
            ""actions"": [
                {
                    ""name"": ""FarmWaterAction"",
                    ""type"": ""Button"",
                    ""id"": ""35991f2c-a940-499f-8287-500d96ce0367"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9aeae9b9-7706-4aee-90fb-7f6496414de3"",
                    ""path"": ""<OculusTouchController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FarmWaterAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DroneMovement
        m_DroneMovement = asset.FindActionMap("DroneMovement", throwIfNotFound: true);
        m_DroneMovement_Move = m_DroneMovement.FindAction("Move", throwIfNotFound: true);
        // DroneRotate
        m_DroneRotate = asset.FindActionMap("DroneRotate", throwIfNotFound: true);
        m_DroneRotate_Rotate = m_DroneRotate.FindAction("Rotate", throwIfNotFound: true);
        // ToggleUIElement
        m_ToggleUIElement = asset.FindActionMap("ToggleUIElement", throwIfNotFound: true);
        m_ToggleUIElement_TurnOnCamera = m_ToggleUIElement.FindAction("TurnOnCamera", throwIfNotFound: true);
        // SprayWater
        m_SprayWater = asset.FindActionMap("SprayWater", throwIfNotFound: true);
        m_SprayWater_SprayWaterAction = m_SprayWater.FindAction("SprayWaterAction", throwIfNotFound: true);
        // SpraySeed
        m_SpraySeed = asset.FindActionMap("SpraySeed", throwIfNotFound: true);
        m_SpraySeed_SpraySeedAction = m_SpraySeed.FindAction("SpraySeedAction", throwIfNotFound: true);
        // FarmWater
        m_FarmWater = asset.FindActionMap("FarmWater", throwIfNotFound: true);
        m_FarmWater_FarmWaterAction = m_FarmWater.FindAction("FarmWaterAction", throwIfNotFound: true);
    }

    ~@DroneControl()
    {
        Debug.Assert(!m_DroneMovement.enabled, "This will cause a leak and performance issues, DroneControl.DroneMovement.Disable() has not been called.");
        Debug.Assert(!m_DroneRotate.enabled, "This will cause a leak and performance issues, DroneControl.DroneRotate.Disable() has not been called.");
        Debug.Assert(!m_ToggleUIElement.enabled, "This will cause a leak and performance issues, DroneControl.ToggleUIElement.Disable() has not been called.");
        Debug.Assert(!m_SprayWater.enabled, "This will cause a leak and performance issues, DroneControl.SprayWater.Disable() has not been called.");
        Debug.Assert(!m_SpraySeed.enabled, "This will cause a leak and performance issues, DroneControl.SpraySeed.Disable() has not been called.");
        Debug.Assert(!m_FarmWater.enabled, "This will cause a leak and performance issues, DroneControl.FarmWater.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DroneMovement
    private readonly InputActionMap m_DroneMovement;
    private List<IDroneMovementActions> m_DroneMovementActionsCallbackInterfaces = new List<IDroneMovementActions>();
    private readonly InputAction m_DroneMovement_Move;
    public struct DroneMovementActions
    {
        private @DroneControl m_Wrapper;
        public DroneMovementActions(@DroneControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_DroneMovement_Move;
        public InputActionMap Get() { return m_Wrapper.m_DroneMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneMovementActions set) { return set.Get(); }
        public void AddCallbacks(IDroneMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IDroneMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IDroneMovementActions instance)
        {
            if (m_Wrapper.m_DroneMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneMovementActions @DroneMovement => new DroneMovementActions(this);

    // DroneRotate
    private readonly InputActionMap m_DroneRotate;
    private List<IDroneRotateActions> m_DroneRotateActionsCallbackInterfaces = new List<IDroneRotateActions>();
    private readonly InputAction m_DroneRotate_Rotate;
    public struct DroneRotateActions
    {
        private @DroneControl m_Wrapper;
        public DroneRotateActions(@DroneControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_DroneRotate_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_DroneRotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneRotateActions set) { return set.Get(); }
        public void AddCallbacks(IDroneRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneRotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneRotateActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IDroneRotateActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IDroneRotateActions instance)
        {
            if (m_Wrapper.m_DroneRotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneRotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneRotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneRotateActions @DroneRotate => new DroneRotateActions(this);

    // ToggleUIElement
    private readonly InputActionMap m_ToggleUIElement;
    private List<IToggleUIElementActions> m_ToggleUIElementActionsCallbackInterfaces = new List<IToggleUIElementActions>();
    private readonly InputAction m_ToggleUIElement_TurnOnCamera;
    public struct ToggleUIElementActions
    {
        private @DroneControl m_Wrapper;
        public ToggleUIElementActions(@DroneControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @TurnOnCamera => m_Wrapper.m_ToggleUIElement_TurnOnCamera;
        public InputActionMap Get() { return m_Wrapper.m_ToggleUIElement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleUIElementActions set) { return set.Get(); }
        public void AddCallbacks(IToggleUIElementActions instance)
        {
            if (instance == null || m_Wrapper.m_ToggleUIElementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToggleUIElementActionsCallbackInterfaces.Add(instance);
            @TurnOnCamera.started += instance.OnTurnOnCamera;
            @TurnOnCamera.performed += instance.OnTurnOnCamera;
            @TurnOnCamera.canceled += instance.OnTurnOnCamera;
        }

        private void UnregisterCallbacks(IToggleUIElementActions instance)
        {
            @TurnOnCamera.started -= instance.OnTurnOnCamera;
            @TurnOnCamera.performed -= instance.OnTurnOnCamera;
            @TurnOnCamera.canceled -= instance.OnTurnOnCamera;
        }

        public void RemoveCallbacks(IToggleUIElementActions instance)
        {
            if (m_Wrapper.m_ToggleUIElementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToggleUIElementActions instance)
        {
            foreach (var item in m_Wrapper.m_ToggleUIElementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToggleUIElementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToggleUIElementActions @ToggleUIElement => new ToggleUIElementActions(this);

    // SprayWater
    private readonly InputActionMap m_SprayWater;
    private List<ISprayWaterActions> m_SprayWaterActionsCallbackInterfaces = new List<ISprayWaterActions>();
    private readonly InputAction m_SprayWater_SprayWaterAction;
    public struct SprayWaterActions
    {
        private @DroneControl m_Wrapper;
        public SprayWaterActions(@DroneControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SprayWaterAction => m_Wrapper.m_SprayWater_SprayWaterAction;
        public InputActionMap Get() { return m_Wrapper.m_SprayWater; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SprayWaterActions set) { return set.Get(); }
        public void AddCallbacks(ISprayWaterActions instance)
        {
            if (instance == null || m_Wrapper.m_SprayWaterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SprayWaterActionsCallbackInterfaces.Add(instance);
            @SprayWaterAction.started += instance.OnSprayWaterAction;
            @SprayWaterAction.performed += instance.OnSprayWaterAction;
            @SprayWaterAction.canceled += instance.OnSprayWaterAction;
        }

        private void UnregisterCallbacks(ISprayWaterActions instance)
        {
            @SprayWaterAction.started -= instance.OnSprayWaterAction;
            @SprayWaterAction.performed -= instance.OnSprayWaterAction;
            @SprayWaterAction.canceled -= instance.OnSprayWaterAction;
        }

        public void RemoveCallbacks(ISprayWaterActions instance)
        {
            if (m_Wrapper.m_SprayWaterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISprayWaterActions instance)
        {
            foreach (var item in m_Wrapper.m_SprayWaterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SprayWaterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SprayWaterActions @SprayWater => new SprayWaterActions(this);

    // SpraySeed
    private readonly InputActionMap m_SpraySeed;
    private List<ISpraySeedActions> m_SpraySeedActionsCallbackInterfaces = new List<ISpraySeedActions>();
    private readonly InputAction m_SpraySeed_SpraySeedAction;
    public struct SpraySeedActions
    {
        private @DroneControl m_Wrapper;
        public SpraySeedActions(@DroneControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpraySeedAction => m_Wrapper.m_SpraySeed_SpraySeedAction;
        public InputActionMap Get() { return m_Wrapper.m_SpraySeed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpraySeedActions set) { return set.Get(); }
        public void AddCallbacks(ISpraySeedActions instance)
        {
            if (instance == null || m_Wrapper.m_SpraySeedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpraySeedActionsCallbackInterfaces.Add(instance);
            @SpraySeedAction.started += instance.OnSpraySeedAction;
            @SpraySeedAction.performed += instance.OnSpraySeedAction;
            @SpraySeedAction.canceled += instance.OnSpraySeedAction;
        }

        private void UnregisterCallbacks(ISpraySeedActions instance)
        {
            @SpraySeedAction.started -= instance.OnSpraySeedAction;
            @SpraySeedAction.performed -= instance.OnSpraySeedAction;
            @SpraySeedAction.canceled -= instance.OnSpraySeedAction;
        }

        public void RemoveCallbacks(ISpraySeedActions instance)
        {
            if (m_Wrapper.m_SpraySeedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpraySeedActions instance)
        {
            foreach (var item in m_Wrapper.m_SpraySeedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpraySeedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpraySeedActions @SpraySeed => new SpraySeedActions(this);

    // FarmWater
    private readonly InputActionMap m_FarmWater;
    private List<IFarmWaterActions> m_FarmWaterActionsCallbackInterfaces = new List<IFarmWaterActions>();
    private readonly InputAction m_FarmWater_FarmWaterAction;
    public struct FarmWaterActions
    {
        private @DroneControl m_Wrapper;
        public FarmWaterActions(@DroneControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @FarmWaterAction => m_Wrapper.m_FarmWater_FarmWaterAction;
        public InputActionMap Get() { return m_Wrapper.m_FarmWater; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FarmWaterActions set) { return set.Get(); }
        public void AddCallbacks(IFarmWaterActions instance)
        {
            if (instance == null || m_Wrapper.m_FarmWaterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FarmWaterActionsCallbackInterfaces.Add(instance);
            @FarmWaterAction.started += instance.OnFarmWaterAction;
            @FarmWaterAction.performed += instance.OnFarmWaterAction;
            @FarmWaterAction.canceled += instance.OnFarmWaterAction;
        }

        private void UnregisterCallbacks(IFarmWaterActions instance)
        {
            @FarmWaterAction.started -= instance.OnFarmWaterAction;
            @FarmWaterAction.performed -= instance.OnFarmWaterAction;
            @FarmWaterAction.canceled -= instance.OnFarmWaterAction;
        }

        public void RemoveCallbacks(IFarmWaterActions instance)
        {
            if (m_Wrapper.m_FarmWaterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFarmWaterActions instance)
        {
            foreach (var item in m_Wrapper.m_FarmWaterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FarmWaterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FarmWaterActions @FarmWater => new FarmWaterActions(this);
    public interface IDroneMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IDroneRotateActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IToggleUIElementActions
    {
        void OnTurnOnCamera(InputAction.CallbackContext context);
    }
    public interface ISprayWaterActions
    {
        void OnSprayWaterAction(InputAction.CallbackContext context);
    }
    public interface ISpraySeedActions
    {
        void OnSpraySeedAction(InputAction.CallbackContext context);
    }
    public interface IFarmWaterActions
    {
        void OnFarmWaterAction(InputAction.CallbackContext context);
    }
}
